// <auto-generated />
using System;
using DailyOperations.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyOperations.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230920205200_Adding general and inner department to soldiers table and next, prev dept info")]
    partial class Addinggeneralandinnerdepartmenttosoldierstableandnextprevdeptinfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DailyOperations.Domain.Entities.DailyOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DailyOperationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DailyOperations");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.AssistantHoliday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HolidayEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HolidayStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HolidayTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<long>("PoliceAssistantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HolidayTypeId");

                    b.HasIndex("PoliceAssistantId");

                    b.ToTable("AssistantHolidays");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.HolidayType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HolidayTypes");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.OfficerHoliday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HolidayEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HolidayStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HolidayTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<long>("PoliceOfficerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HolidayTypeId");

                    b.HasIndex("PoliceOfficerId");

                    b.ToTable("OfficerHolidays");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.SoldierHoliday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HolidayEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HolidayStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HolidayTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<long>("SoldierId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HolidayTypeId");

                    b.HasIndex("SoldierId");

                    b.ToTable("SoldierHolidays");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.AssistantsMilitaryDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AssistantMilitaryDegrees");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.EducationCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SoldierId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SoldierId");

                    b.ToTable("EducationCertificates");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.EducationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EducationTypes");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.OfficerMilitaryDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OfficerMilitaryDegrees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Degree = "ملازم",
                            DisplayOrder = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2L,
                            Degree = "ملازم أول",
                            DisplayOrder = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3L,
                            Degree = "نقيب",
                            DisplayOrder = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4L,
                            Degree = "رائد",
                            DisplayOrder = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5L,
                            Degree = "مقدم",
                            DisplayOrder = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6L,
                            Degree = "عقيد",
                            DisplayOrder = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7L,
                            Degree = "عميد",
                            DisplayOrder = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8L,
                            Degree = "لواء",
                            DisplayOrder = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9L,
                            Degree = "مساعد وزير",
                            DisplayOrder = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10L,
                            Degree = "مساعد أول وزير",
                            DisplayOrder = 8,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.PoliceAssistant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AssistantsMilitaryDegreeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InnerDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("PowerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssistantsMilitaryDegreeId");

                    b.HasIndex("GeneralDepartmentId");

                    b.HasIndex("InnerDepartmentId");

                    b.HasIndex("PowerTypeId");

                    b.ToTable("PoliceAssistants");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.PoliceOfficer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InnerDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInadministrativeWork")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("OfficerMilitaryDegreeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("PoliceOfficerAlternativeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PowerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralDepartmentId");

                    b.HasIndex("InnerDepartmentId");

                    b.HasIndex("OfficerMilitaryDegreeId");

                    b.HasIndex("PoliceOfficerAlternativeId");

                    b.HasIndex("PowerTypeId");

                    b.ToTable("PoliceOfficers");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.PowerType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PowerTypes");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.SoldiersExtraDuration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExtraDuration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SoldierId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SoldierId");

                    b.ToTable("SoldiersExtraDurations");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleLetters")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("VehicleMarkId")
                        .HasColumnType("bigint");

                    b.Property<string>("VehicleNumbers")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("VehicleTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VehicleMarkId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.VehicleMark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VehicleMarks");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.VehicleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.OperationDescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationDescriptions");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.OperationInstruction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationInstructions");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.GeneralDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GeneralDepartments");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.InnerDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InnerDepartments");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperatinSoldier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OperationDescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationInstructionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SoldierId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TimeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperationDescriptionId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OperationInstructionId");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("SoldierId");

                    b.ToTable("OperatinSoldiers");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("DailyOperationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("InnerDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("SectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("SectorPlaceFromId")
                        .HasColumnType("bigint");

                    b.Property<long>("SectorPlaceToId")
                        .HasColumnType("bigint");

                    b.Property<int>("ShiftTimeFrom")
                        .HasColumnType("int");

                    b.Property<int>("ShiftTimeTo")
                        .HasColumnType("int");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DailyOperationId");

                    b.HasIndex("GeneralDepartmentId");

                    b.HasIndex("InnerDepartmentId");

                    b.HasIndex("SectorId");

                    b.HasIndex("SectorPlaceFromId");

                    b.HasIndex("SectorPlaceToId");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperationOfficer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OperationDescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationInstructionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PoliceOfficerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TimeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperationDescriptionId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OperationInstructionId");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("PoliceOfficerId");

                    b.ToTable("OperationOfficers");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperationPoliceAssistant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OperationDescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationInstructionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PoliceAssistantId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TimeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OperationDescriptionId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OperationInstructionId");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("PoliceAssistantId");

                    b.ToTable("OperationPoliceAssistants");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperationVehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<long>("DriverType")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("OperationDescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OperationInstructionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OperationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedOperationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedOperationType")
                        .HasColumnType("bigint");

                    b.Property<int?>("TimeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationDescriptionId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OperationInstructionId");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("OperationVehicles");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.Sector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.SectorPlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SectorPlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SectorPlaces");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.ShiftType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ShiftTypes");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.OperationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Soldier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EducationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GeneralDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InnerDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("NextDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("NextMovingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("PowerTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PreviousDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PreviousMovingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecruitmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecruitmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("GeneralDepartmentId");

                    b.HasIndex("InnerDepartmentId");

                    b.HasIndex("NextDepartmentId");

                    b.HasIndex("PowerTypeId");

                    b.HasIndex("PreviousDepartmentId");

                    b.ToTable("Soldiers");
                });

            modelBuilder.Entity("SkillSoldier", b =>
                {
                    b.Property<long>("SkillsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SoldiersId")
                        .HasColumnType("bigint");

                    b.HasKey("SkillsId", "SoldiersId");

                    b.HasIndex("SoldiersId");

                    b.ToTable("SkillSoldier");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.AssistantHoliday", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Holidays.HolidayType", "HolidayType")
                        .WithMany()
                        .HasForeignKey("HolidayTypeId");

                    b.HasOne("DailyOperations.Domain.Entities.Members.PoliceAssistant", "PoliceAssistant")
                        .WithMany()
                        .HasForeignKey("PoliceAssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayType");

                    b.Navigation("PoliceAssistant");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.OfficerHoliday", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Holidays.HolidayType", "HolidayType")
                        .WithMany()
                        .HasForeignKey("HolidayTypeId");

                    b.HasOne("DailyOperations.Domain.Entities.Members.PoliceOfficer", "PoliceOfficer")
                        .WithMany()
                        .HasForeignKey("PoliceOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayType");

                    b.Navigation("PoliceOfficer");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Holidays.SoldierHoliday", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Holidays.HolidayType", "HolidayType")
                        .WithMany()
                        .HasForeignKey("HolidayTypeId");

                    b.HasOne("DailyOperations.Domain.Entities.Soldier", "Soldier")
                        .WithMany()
                        .HasForeignKey("SoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayType");

                    b.Navigation("Soldier");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.EducationCertificate", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Soldier", "Soldier")
                        .WithMany()
                        .HasForeignKey("SoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Soldier");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.PoliceAssistant", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Members.AssistantsMilitaryDegree", "AssistantsMilitaryDegree")
                        .WithMany()
                        .HasForeignKey("AssistantsMilitaryDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.GeneralDepartment", "GeneralDepartment")
                        .WithMany()
                        .HasForeignKey("GeneralDepartmentId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.InnerDepartment", "InnerDepartment")
                        .WithMany()
                        .HasForeignKey("InnerDepartmentId");

                    b.HasOne("DailyOperations.Domain.Entities.Members.PowerType", "PowerType")
                        .WithMany()
                        .HasForeignKey("PowerTypeId");

                    b.Navigation("AssistantsMilitaryDegree");

                    b.Navigation("GeneralDepartment");

                    b.Navigation("InnerDepartment");

                    b.Navigation("PowerType");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.PoliceOfficer", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Operations.GeneralDepartment", "GeneralDepartment")
                        .WithMany()
                        .HasForeignKey("GeneralDepartmentId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.InnerDepartment", "InnerDepartment")
                        .WithMany()
                        .HasForeignKey("InnerDepartmentId");

                    b.HasOne("DailyOperations.Domain.Entities.Members.OfficerMilitaryDegree", "OfficerMilitaryDegree")
                        .WithMany()
                        .HasForeignKey("OfficerMilitaryDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Members.PoliceOfficer", "PoliceOfficerAlternative")
                        .WithMany()
                        .HasForeignKey("PoliceOfficerAlternativeId");

                    b.HasOne("DailyOperations.Domain.Entities.Members.PowerType", "PowerType")
                        .WithMany()
                        .HasForeignKey("PowerTypeId");

                    b.Navigation("GeneralDepartment");

                    b.Navigation("InnerDepartment");

                    b.Navigation("OfficerMilitaryDegree");

                    b.Navigation("PoliceOfficerAlternative");

                    b.Navigation("PowerType");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.SoldiersExtraDuration", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Soldier", "Soldier")
                        .WithMany()
                        .HasForeignKey("SoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Soldier");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Members.Vehicle", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Members.VehicleMark", "VehicleMark")
                        .WithMany()
                        .HasForeignKey("VehicleMarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Members.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleMark");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperatinSoldier", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.OperationDescription", "OperationDescription")
                        .WithMany()
                        .HasForeignKey("OperationDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationInstruction", "OperationInstruction")
                        .WithMany()
                        .HasForeignKey("OperationInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Soldier", "Soldier")
                        .WithMany()
                        .HasForeignKey("SoldierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("OperationDescription");

                    b.Navigation("OperationInstruction");

                    b.Navigation("OperationType");

                    b.Navigation("Soldier");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.Operation", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.DailyOperation", "DailyOperation")
                        .WithMany()
                        .HasForeignKey("DailyOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.GeneralDepartment", "GeneralDepartment")
                        .WithMany()
                        .HasForeignKey("GeneralDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.InnerDepartment", "InnerDepartment")
                        .WithMany()
                        .HasForeignKey("InnerDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.SectorPlace", "SectorPlaceFrom")
                        .WithMany()
                        .HasForeignKey("SectorPlaceFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.SectorPlace", "SectorPlaceTo")
                        .WithMany()
                        .HasForeignKey("SectorPlaceToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.ShiftType", "ShiftType")
                        .WithMany()
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyOperation");

                    b.Navigation("GeneralDepartment");

                    b.Navigation("InnerDepartment");

                    b.Navigation("Sector");

                    b.Navigation("SectorPlaceFrom");

                    b.Navigation("SectorPlaceTo");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperationOfficer", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.OperationDescription", "OperationDescription")
                        .WithMany()
                        .HasForeignKey("OperationDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationInstruction", "OperationInstruction")
                        .WithMany()
                        .HasForeignKey("OperationInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Members.PoliceOfficer", "PoliceOfficer")
                        .WithMany()
                        .HasForeignKey("PoliceOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("OperationDescription");

                    b.Navigation("OperationInstruction");

                    b.Navigation("OperationType");

                    b.Navigation("PoliceOfficer");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperationPoliceAssistant", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.OperationDescription", "OperationDescription")
                        .WithMany()
                        .HasForeignKey("OperationDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationInstruction", "OperationInstruction")
                        .WithMany()
                        .HasForeignKey("OperationInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Members.PoliceAssistant", "PoliceAssistant")
                        .WithMany()
                        .HasForeignKey("PoliceAssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("OperationDescription");

                    b.Navigation("OperationInstruction");

                    b.Navigation("OperationType");

                    b.Navigation("PoliceAssistant");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Operations.OperationVehicle", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.OperationDescription", "OperationDescription")
                        .WithMany()
                        .HasForeignKey("OperationDescriptionId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.OperationInstruction", "OperationInstruction")
                        .WithMany()
                        .HasForeignKey("OperationInstructionId");

                    b.HasOne("DailyOperations.Domain.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId");

                    b.HasOne("DailyOperations.Domain.Entities.Members.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("OperationDescription");

                    b.Navigation("OperationInstruction");

                    b.Navigation("OperationType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DailyOperations.Domain.Entities.Soldier", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Members.EducationType", "EducationType")
                        .WithMany()
                        .HasForeignKey("EducationTypeId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.GeneralDepartment", "GeneralDepartment")
                        .WithMany()
                        .HasForeignKey("GeneralDepartmentId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.InnerDepartment", "InnerDepartment")
                        .WithMany()
                        .HasForeignKey("InnerDepartmentId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.InnerDepartment", "NextDepartment")
                        .WithMany()
                        .HasForeignKey("NextDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Members.PowerType", "PowerType")
                        .WithMany()
                        .HasForeignKey("PowerTypeId");

                    b.HasOne("DailyOperations.Domain.Entities.Operations.InnerDepartment", "PreviousDepartment")
                        .WithMany()
                        .HasForeignKey("PreviousDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationType");

                    b.Navigation("GeneralDepartment");

                    b.Navigation("InnerDepartment");

                    b.Navigation("NextDepartment");

                    b.Navigation("PowerType");

                    b.Navigation("PreviousDepartment");
                });

            modelBuilder.Entity("SkillSoldier", b =>
                {
                    b.HasOne("DailyOperations.Domain.Entities.Members.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyOperations.Domain.Entities.Soldier", null)
                        .WithMany()
                        .HasForeignKey("SoldiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
